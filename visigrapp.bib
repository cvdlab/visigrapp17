@article{Volk2014109,
	title = "{Building Information Modeling (BIM) for existing buildings --- Literature review and future needs}",
	journal = "Automation in Construction ",
	volume = "38",
	number = "",
	pages = "109 - 127",
	year = "2014",
	note = "",
	issn = "0926-5805",
	doi = "http://dx.doi.org/10.1016/j.autcon.2013.10.023",
	url = "http://www.sciencedirect.com/science/article/pii/S092658051300191X",
	author = "Rebekka Volk and Julian Stengel and Frank Schultmann",
	keywords = "As-built \{BIM\} (Building Information Modeling)2",
	keywords = "Existing buildings",
	keywords = "Facility management (FM)1",
	keywords = "Maintenance1",
	keywords = "Retrofit1",
	keywords = "Deconstruction1",
	keywords = "Dismantling1",
	keywords = "Demolition1",
	keywords = "‘Scan-to-BIM’",
	keywords = "Reverse engineering ",
	abstract = "Abstract While \{BIM\} processes are established for new buildings, the majority of existing buildings is not maintained, refurbished or deconstructed with \{BIM\} yet. Promising benefits of efficient resource management motivate research to overcome uncertainties of building condition and deficient documentation prevalent in existing buildings. Due to rapid developments in \{BIM\} research, involved stakeholders demand a state-of-the-art overview of \{BIM\} implementation and research in existing buildings. This paper presents a review of over 180 recent publications on the topic. Results show scarce \{BIM\} implementation in existing buildings yet, due to challenges of (1) high modeling/conversion effort from captured building data into semantic \{BIM\} objects, (2) updating of information in \{BIM\} and (3) handling of uncertain data, objects and relations in \{BIM\} occurring in existing buildings. Despite fast developments and spreading standards, challenging research opportunities arise from process automation and \{BIM\} adaption to existing buildings' requirements. "
}

@inproceedings{Moore99,
	author = "Moore, R. and Lopes, J.",
	booktitle = "{TEMPLATE'06, 1st International Conference on Template Production}",
	file = F,
	publisher = "SCITEPRESS",
	title = "{Paper templates}",
	year = "1999"
}

@book{Smith98,
	address = "London",
	author = "Smith, J.",
	edition = "2nd",
	file = F,
	publisher = "The publishing company",
	title = "{The Book}",
	year = "1998"
}

@misc{redux,
        author = "Abramov, Dan",
	howpublished = "\url{http://redux.js.org/}",
	note = "Accessed: 2016-11-09",
	title = "{Redux: predictable state container for JavaScript apps}",
	year = "2016"
}

@misc{ncLab,
	author = {Pavel Solin},
    title = {\href{https://nclab.com/3d-gallery/}{Creative Computing Platform: Learn Coding and 3D Modeling!}},
	note = "Accessed: 2016-11-12",
	year = "2016"
}

@incollection{smartWaste,
	author = "Hurley, James W.",
	booktitle = "{10th Symposium Construction Innovation and Global Competitiveness}",
	series = "{Conference Proceedings for the 10th Syposium Construction Innovation and Global Competitiveness}",
	title = "{How to SMARTWaste the Construction Industry}",
	year = "2002"
}

@phdthesis{altamura:12,
	Author = {Paola Altamura},
	School = {Sapienza Universit\`a di Roma},
	Title = {Gestione eco-efficace dei materiali da costruzione nel ciclo di vita del fabbricato},
	Year = 2012,
	Note = {(in Italian)}
}

@book{Paoluzzi:2001:GPC:600092,
    author = {Paoluzzi, Alberto and Pascucci, Valerio and Vicentino, Michele and Baldazzi, Claudio and Portuesi, Simone},
    title = {Geometric Programming for Computer Aided Design},
    year = {2003},
    isbn = {0471899429},
    publisher = {John Wiley \& Sons, Inc.},
    address = {New York, NY, USA},
    note = {815 pages}
} 
@article{Paoluzzi:1995:GPP:212332.212349,
	Acmid = {212349},
	Address = {New York, NY, {USA}},
	Author = {Paoluzzi, Alberto and Pascucci, Valerio and Vicentino, Michele},
	Doi = {10.1145/212332.212349},
	Issn = {0730-0301},
	Issue_Date = {July 1995},
	Journal = {{ACM} Trans. Graph.},
	Keywords = {design language, functional programming, generative modeling, geometric design, polyhedra, solid modeling, variational geometry},
	Month = jul,
	Number = 3,
	Numpages = {41},
	Pages = {266--306},
	Publisher = {Acm},
	Title = {Geometric programming: a programming approach to geometric design},
	Url = {http://doi.acm.org/10.1145/212332.212349},
	Volume = 14,
	Year = 1995,
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/212332.212349},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/212332.212349}}

@article{Dicarlo:2014:TNL:2543138.2543294,
	Acmid = {2543294},
	Address = {Newton, MA, USA},
	Author = {DiCarlo, A. and Paoluzzi, A. and Shapiro, V.},
	Doi = {10.1016/j.cad.2013.08.044},
	Issn = {0010-4485},
	Issue_Date = {January, 2014},
	Journal = {Comput. Aided Des.},
	Keywords = {Chain complex, Representation scheme, Solid modeling, Sparse matrix},
	Month = jan,
	Numpages = {6},
	Pages = {269--274},
	Publisher = {Butterworth-Heinemann},
	Title = {Linear Algebraic Representation for Topological Structures},
	Url = {http://dx.doi.org/10.1016/j.cad.2013.08.044},
	Volume = {46},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/j.cad.2013.08.044}
}

@article{ieee-tase,
	Author = {DiCarlo, A. and Milicchio, F. and Paoluzzi, A. and Shapiro, V.},
	Doi = {10.1109/TASE.2009.2021342},
	Issn = {1545-5955},
	Journal = {Automation Science and Engineering, {IEEE} Transactions on},
	Keywords = {Euler operators;Hasse matrix;block-bidiagonal matrix;chain-based representations;local mesh refinements;multilinear transformations;physical modeling;solid modeling;topology-preserving mesh refinements;matrix algebra;mesh generation;},
	Month = {July},
	Number = 3,
	Pages = {454 -467},
	Title = {Chain-Based Representations for Solid and Physical Modeling},
	Volume = 6,
	Year = 2009,
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/TASE.2009.2021342}
}

@techreport{BWWLA89,
	Author = {Backus, J. and Williams, J.H. and Wimmers, E.L. and Lucas, P. and Aiken, A.},
	Institution = {IBM Research Report},
	Title = {{FL} Language Manual, Parts 1 and 2.},
	Volume = {RJ 7100 (67163)},
	Year = 1989}

@incollection{fl-1,
	Address = {Boston, MA, {USA}},
	Author = {John Backus and John H. Williams and Edward L. Wimmers},
	Booktitle = {Research topics in functional programming},
	Isbn = {0-201-17236-4},
	Pages = {219--247},
	Publisher = {Addison-Wesley Longman Publishing Co., Inc.},
	Title = {An introduction to the programming language {FL}},
	Year = 1990}

@article{backus:78,
	Address = {New York, NY, {USA}},
	Author = {John Backus},
	Doi = {http://doi.acm.org/10.1145/359576.359579},
	Issn = {0001-0782},
	Journal = {Commun. {ACM}},
	Number = 8,
	Pages = {613--641},
	Publisher = {{ACM} Press},
	Title = {Can programming be liberated from the {von Neumann} style?: a functional style and its algebra of programs},
	Volume = 21,
	Year = 1978,
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/359576.359579}}

@article{BEKS14,
	Abstract = {The Julia programming language is gaining enormous popularity. Julia was designed to be easy and fast. Most importantly, Julia shatters deeply established notions widely held in the applied community:

1. High-level, dynamic code has to be slow by some sort of law of nature.
2. It is sensible to prototype in one language and then recode in another language.
3. There are parts of a system for the programmer, and other parts best left untouched as they are built by the experts.

Julia began with a deep understanding of the needs of the scientific programmer and the needs of the computer in mind. Bridging cultures that have often been distant, Julia combines expertise from computer science and computational science creating a new approach to scientific computing. This note introduces the programmer to the language and the underlying design theory. It invites the reader to rethink the fundamental foundations of numerical computing systems.

In particular, there is the fascinating dance between specialization and abstraction. Specialization allows for custom treatment. We can pick just the right algorithm for the right circumstance and this can happen at runtime based on argument types (code selection via multiple dispatch). Abstraction recognizes what remains the same after differences are stripped away and ignored as irrelevant. The recognition of abstraction allows for code reuse (generic programming). A simple idea that yields incredible power. The Julia design facilitates this interplay in many explicit and subtle ways for machine performance and, most importantly, human convenience.},
	Eprinttype = {arXiv},
	Author = {Jeff Bezanson and Alan Edelman and Stefan Karpinski and Viral B. Shah},
	Eprint = {1411.1607},
	Month = {November},
	Eprintclass = {cs.MS},
	Title = {{J}ulia: A Fresh Approach to Numeric Computing},
	Year = {2014}}
